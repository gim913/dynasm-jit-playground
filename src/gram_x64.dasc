|.arch x64
|.section code
|.globals GLOB_
|.actionlist actions
|
|.macro saveregs
|    push rdi; push rsi
|.endmacro 
|.macro restoreregs
|    pop rsi; pop rdi;
|.endmacro

#include "dynasm-helper.h"
#include "gram_bc.h"
#include <stdint.h>
#include <map>
#include <iostream>

#pragma pack(push, 1)
struct Instr {
	uint32_t opcode;
	uint32_t op[3]; // operands
	uint16_t statsCounter, statsIdx;
};
#pragma pack(pop)

|.type INSTR, Instr

#define GETCD(programCounter) (instructions[programCounter].opcode)
#define GETOP(idx,programCounter) (instructions[programCounter].op[idx-1])
#define STATSCNT(programCounter) (instructions[programCounter].statsCounter)
#define STATSIDX(programCounter,cnt) (instructions[programCounter].statsIdx = (uint16_t)cnt)

#define printgen(xxx) do { if(0) std::cerr << xxx; } while(0)

void dumpInstructions(Instr* instructions, int start = 0, int end = 0);
int labelsCount = 1;

bool dynasmGenerator(Dst_DECL, Instr* instructions, size_t instructionsCount, size_t start, size_t end, uint64_t* machineMem, size_t maxMemAccess)
{
	// dumpInstructions(instructions, start, end+1);

	// we WON'T try to be smart, in first pass we
	// check if all the jumps fall into start/end range
	// (it's also allowed to do jump to 'end+1')
	// if any jump is outside we won't to try to JIT that piece
	//
	// there will also be special case if jump dest > instructionsCount (end of program)

	// we'll collect all the jump destinations in following map, we're gonna need that later
	std::map<size_t, int> labels;

	// pass 1
	size_t locGpc = start;
	size_t dest;
	while (1)
	{
		switch (GETCD(locGpc))
		{
			case Op_Zero:
			case Op_Increment:
			case Op_Transfer:
				locGpc++;
				break;
			case Op_Jump:
			case Op_Conditional_Jump:
				dest = GETOP(3, locGpc);
				if (dest < instructionsCount) {
					if (dest < start || dest > end+1) {
						printgen("fatal fail\n");
						return false;
					}
					labels[dest] = 0;
				}
				locGpc++;
				break;
			case Op_Generated:
				dest = GETOP(3, locGpc);
				if (dest < start || dest > end+1) {
					printgen("fatal fail\n");
					return false;
				}
				labels[dest] = 0;
				locGpc = dest;
				break;
		}
		if (locGpc > end) {
			break;
		}
	}

	std::map<size_t, int>::iterator it = labels.begin();
	std::map<size_t, int>::iterator _it = labels.end();

	for (; it != _it; ++it) {
		(*it).second = labelsCount++;
	}

	Dst->growPc(labelsCount);

	uint64_t natInstructions = (uint64_t)instructions;
	uint64_t natMachineMem = (uint64_t)machineMem;

	| saveregs
	|
	| mov64 rdi, natMachineMem
	| mov64 rsi, natInstructions
	| xor rax, rax
	|
	|1:

	locGpc = start;
	uint32_t op1, op2;
	while (1)
	{
		it = labels.find(locGpc);
		if (it != labels.end()) {
			|=>((*it).second):
		}
		switch (GETCD(locGpc))
		{
		case Op_Zero:
			op1 = GETOP(1, locGpc);
			| mov eax, op1
			| mov aword [rdi + rax*8], 0

			printgen("..EIP("<< locGpc <<") Z("<< GETOP(1, locGpc) <<")\n");
			// machineMem[GETOP(1, locGpc)] = 0;
			locGpc++; break;
		case Op_Increment:
			op1 = GETOP(1, locGpc);
			| mov eax, op1
			| inc aword [rdi + rax*8]

			printgen("..EIP("<< locGpc <<") S("<< GETOP(1, locGpc) <<")\n");
			// machineMem[GETOP(1, locGpc)]++;
			locGpc++; break;
		case Op_Transfer:
			op1 = GETOP(1, locGpc);
			op2 = GETOP(2, locGpc);
			| mov eax, op1
			| mov rcx, aword [rdi + rax*8]
			| mov eax, op2
			| mov aword [rdi + rax*8], rcx

			printgen("..EIP("<< locGpc <<") T("<< GETOP(1, locGpc) <<") -> ("<< GETOP(2, locGpc) <<")\n");
			// machineMem[GETOP(2, locGpc)]=machineMem[GETOP(1, locGpc)];
			locGpc++; break;
		case Op_Jump:
			dest = GETOP(3, locGpc);
			printgen("..EIP("<< locGpc <<") goto "<<dest<<":"<< labels[dest] <<"\n");
			if (dest == end+1 || dest >= instructionsCount) {
				| mov64 rax, dest
				| jmp >3

			} else {
				| jmp => labels[dest]
			}
			locGpc++; break;
			break;

		case Op_Conditional_Jump:
			op1 = GETOP(1, locGpc);
			op2 = GETOP(2, locGpc);
			dest = GETOP(3, locGpc);
			printgen("..EIP("<< locGpc <<") ("<< GETOP(1, locGpc) <<") == ("<< GETOP(2, locGpc) <<") goto "<<dest<<":"<< labels[dest] <<"\n");
			| mov eax, op1
			| mov rcx, aword [rdi + rax*8]
			| mov eax, op2
			| cmp aword [rdi + rax*8], rcx
			| jne >2
			if (dest == end+1 || dest >= instructionsCount) {
				| mov64 rax, dest
				| jmp >3

			} else {
				| je => labels[dest]
			}
			|2:

			locGpc++; break;
			break;

		case Op_Generated:
			dest = GETOP(3, locGpc);
			size_t fptr = *((size_t*)instructions[locGpc].op);

			printgen("..EIP("<< locGpc <<") (");
			printgen(std::hex << fptr << ") then goto ");
			printgen(std::dec << GETOP(3, locGpc) << " vs " << labels[dest] << "\n");

			// we could drop whole rsi register, but it seems, I'm having better results using this
			// than when using "mov64 rax, fptr"
			//
			| mov rax, aword [rsi + locGpc*sizeof(Instr) + 4]
			| call rax
			| mov64 rcx, instructionsCount
			| cmp rax, rcx
			| jae >3
			if (dest == end+1) {
				| jmp >3

			} else {
				// ...
			}
			locGpc = dest;
		}

		if (locGpc > end) {
			break;
		}
	}
| 3:
| restoreregs
| ret

	return true;
}
